####################################
# Description Block (Required)
####################################
# The description block is where the description of the study is placed. This
# section is meant primarily for documentation purposes so that when a
# spcecifcation is passed to other users they can gleam a general understanding
# of what this study is meant to achieve.
#-------------------------------
# Required keys:
#   name - Name of the study
#   description - Description of what this study does.
#-------------------------------
# NOTE: You can add other keys to this block for custom documentation. Maestro
# currently on looks for the required set.
####################################
description:
    name: lulesh_sample1
    description: A sample LULESH study that downloads, builds, and runs a parameter study of varying problem sizes and iterations.

####################################
# Environment Block
####################################
# The environment block is where items describing the study's environment are
# defined. This includes static information that the study needs to know about
# and dependencies that the workflow requires for execution.
#-------------------------------
# NOTE: This block isn't strictly required as a study may not depend on anything.
####################################
env:
    #-------------------------------
    # Variables
    #-------------------------------
    # Static values that the workflow substitutes into steps and are similar in
    # concept to Unix environment variables. These variables are not dependent
    # on values in the environment and so are more portable.

    # NOTE: These values are substituted as static strings meaning that other
    # variables should not used in other variables.
    #-------------------------------
    variables:
        # OUTPUT_PATH is a keyword variable that Maestro looks for in order to
        # set a custom output path for the study workspace. If not specified,
        # OUTPUT_PATH is assumed to be the path where Maestro was launched from.
        OUTPUT_PATH: ./sample_output/lulesh

    #-------------------------------
    # Labels
    #-------------------------------
    # Static values that can contain variables and parameters which, like
    # variables, will be substituted into all steps. Labels are useful for
    # enforcing fixed formatting for output files, or fixed formatting for
    # components of steps which follow fixed formats.
    #-------------------------------
    labels:
        outfile: $(SIZE.label).$(ITERATIONS.label).log

    #-------------------------------
    # Dependencies
    #-------------------------------
    # Dependencies represent external artifacts that should be present before a
    # workflow can run. These are things like acquirable inputs from a directory
    # or a repository such as input files for programs, code, data, etc..

    # NOTE: Currently there are only two types of dependencies:
    # path - verifies the existence of the specified path before execution.
    # git  - clones the specified repository before execution of the study.
    #-------------------------------
    dependencies:
      git:
        - name: LULESH
          path: $(OUTPUT_PATH)
          url: https://github.com/LLNL/LULESH.git

####################################
# Study Block (Required)
####################################
# The study block is where the steps in the workflow are defined. This section
# of the specfication represents the unexpanded set of tasks that the study
# is composed of.
####################################
study:
    #-------------------------------
    # Study Steps
    #-------------------------------
    # Represents a task to be completed in the study's workflow.
    #-------------------------------
      # 'make-lulesh' is an example of a singular step because the task
      # does not contain parameters (more on those later).
      # name: Unique name that identifies the task. (Required)
    - name: make-lulesh
      # description: A general description of what this step is intended to do.
      # (Required)
      description: Build the serial version of LULESH.
      # run: Properties that describe the actual specification of the task.
      run:
          # cmd: The actual task to be executed. (Required)
          cmd: |
            cd $(LULESH)
            sed -i 's/^CXX = $(MPICXX)/CXX = $(SERCXX)/' ./Makefile
            sed -i 's/^CXXFLAGS = -g -O3 -fopenmp/#CXXFLAGS = -g -O3 -fopenmp/' ./Makefile
            sed -i 's/^#LDFLAGS = -g -O3/LDFLAGS = -g -O3/' ./Makefile
            sed -i 's/^LDFLAGS = -g -O3 -fopenmp/#LDFLAGS = -g -O3 -fopenmp/' ./Makefile
            sed -i 's/^#CXXFLAGS = -g -O3 -I/CXXFLAGS = -g -O3 -I/' ./Makefile
            make clean
            make
          # depends: A list of task names that this step is dependent on.
          # The 'make-lulesh' step is not dependent on other tasks, and so will
          # be executed at the start of the study.
          depends: []

      # 'run-lulesh' is an example of a parameterized step because the task
      # contains parameters (more on those later).
    - name: run-lulesh
      description: Run LULESH.
      run:
          cmd: |
            $(LULESH)/lulesh2.0 -s $(SIZE) -i $(ITERATIONS) -p > $(outfile)
          # NOTE: Because 'make-lulesh' is a singular step, it is only executed
          # once. All parameterizations of 'run-lulesh' are dependent on the
          # single node.
          depends: [make-lulesh]

    - name: post-process-lulesh
      description: Post process all LULESH results.
      run:
          # This step refers to the 'run-lulesh' workspace using the
          # $(run-lulesh.workspace) moniker.
          # NOTE: A step can refer to other workspaces by using the step's name
          # followed by '.workspace' such as '$(run-lulesh.workspace)'.
          # NOTE: This step contains a special case. Because this step waits on
          # all combinations of 'run-lulesh', $(run-lulesh.workspace) refers to
          # the top level directory that contains each parameterized workspace.
          # In this case, it points to './sample_output/lulesh/run-lulesh'.
          cmd: |
            echo "Unparameterized step with Parameter Independent dependencies." >> out.log
            echo $(run-lulesh.workspace) > out.log
            ls $(run-lulesh.workspace) > ls.log
          # The 'post-process-lulesh' step is dependent on the completion of
          # all parameterizations of 'run-lulesh' as represented by the '_*'.
          # Because this step is not parameterized, it is a singular step that
          # waits for all 'run-lulesh' steps to complete.
          depends: [run-lulesh_*]

    - name: post-process-lulesh-trials
      description: Post process all LULESH results.
      run:
          cmd: |
            echo "Parameterized step that has Parameter Independent dependencies" >> out.log
            echo "TRIAL = $(TRIAL)" >> out.log
            echo $(run-lulesh.workspace) >> out.log
            ls $(run-lulesh.workspace) > out.log
          # 'post-process-lulesh-trials' like 'post-process-lulesh' is dependent
          # on all parameterizations of 'run-lulesh'. In this case, because this
          # step is parameterized based on $(TRIALS), there will be a version of
          # 'post-process-lulesh-trials' for each unique value of $(TRIAL) that
          # each will wait on all combinations of 'run-lulesh'.
          depends: [run-lulesh_*]

    - name: post-process-lulesh-size
      description: Post process all LULESH results.
      run:
          cmd: |
            echo "Parameterized step that has Parameter Independent dependencies" >> out.log
            echo "SIZE = $(SIZE)" >> out.log
            echo $(run-lulesh.workspace) >> out.log
            ls $(run-lulesh.workspace) | grep $(SIZE.label) >> out.log
          # This step is more or less exactly the same as 'post-process-lulesh-trials'
          # but it is parameterized on $(SIZE). This step is meant to illustrate
          # that parameters can be reused for filtering or other useful things when
          # dependent on parameterizations of other steps.
          depends: [run-lulesh_*]

      # NOTE: The 'depends' entry in a specification does not use parameterized
      # names -- instead Maestro attempts to infer the expansion of the graph
      # based on context via looking to see if a step uses parameters, workspaces,
      # and if the step depends on other steps that are parameterized.
      # NOTE: Second note -- this example lacks a type of step. It is possible
      # to have a step that is expanded because its dependencies have been
      # expanded. For example, if you wanted to run individual post processing
      # after each 'run-lulesh' step, you might have a step called
      # 'post-process-run' that is dependent on 'run-lulesh'. This notation
      # corresponds with the concept of "for each unique 'run-lulesh', there
      # is a corresponding 'post-process-run'". So for example, the expanded
      # 'run-lulesh_SIZE.10.ITER.10' would have a corresponding step named
      # 'post-process-run_SIZE.10.ITER.10' when declaring that 'post-process-run'
      # depends on 'run-lulesh' (which, to be clear, is different than depends
      # on 'run-lulesh_*' which declares dependency on ALL combinations of
      # 'run-lulesh').

global.parameters:
    TRIAL:
        values  : [1, 2, 3, 4, 5, 6, 7, 8, 9]
        label   : TRIAL.%%
    SIZE:
        values  : [10, 10, 10, 20, 20, 20, 30, 30, 30]
        label   : SIZE.%%
    ITERATIONS:
        values  : [10, 20, 30, 10, 20, 30, 10, 20, 30]
        label   : ITER.%%
